python training:


type() = tell us about the data type of the given variable or data.
input() = takes the input from the user.

type conversion:
#implicit type conversion: pyhon done automatically type conversion.
#explicit : when user tell the python to convert the data type.
    : int(put data here which you want to convert)
    : float()
    : str()
    : bool()
    : complex()
    : list()
*type conversion does not change the orignal value, it does not a permanently convert the type.	

 Literals
 literal ia a raw data given in a variable. In Python, there are various types of literals they are as follows:
 1- Numeric literals 
   a= 0b1010 #Binary Literals : put 0b before binary code of a number
   b= 100    #Decimal Literals : 
   c= 0o310  #Octal Literals    : put 0o for octadecimal code
   d= 0x12c  #Hexadecimal Literals: put 0x before hexadecimal code of a number
   
   #float Literals
   float_1 = 10.5
   float_2 = 1.5e2 :( 1.5 10^2 ) ( 10 to the power of 2)
   float_3 = 1.5e-3: ( 1.5 * 10^-3 )
   
   #complex Literals
   x = 3.14j : print ( x , x.imag , x.real) imag for imaginary part and real for real part of complex number.
   
 2- Sting Literals
 string = 'This is Python'
 string2= "this is python"
 char = "c"
 multiline_str = """This is a multiline string with more than one line code."""
 unicode = u"\U0001f600\U0001F606\U0001F923
 raw_str = r"raw \n string"
 3- Booloean Literals
 a= True+4
 b = False+10
 print("a:",a)
 output = a:5
 4- Special Literals
 a= None # None is absence of anything
 print(a)
 output = None 
 
 Operators
 Operators are used to perform operations onvariables and values. Pthon has the following operators:
 1- Arithmetic Operators
 mathematical operator perform between 2 variable ( +,-,/,%,**, //) # print(x**y) x=5,y=2 then it means 5^2. #print(x//2) that meant if the result is in foat it will convert the result into int.
 2- Comparison or relational operators(<, > , >=, <=, ==, !=)
 3- Logical operators(or,and,not)
  print(x or y), print(x and y), print(not y) #x= True, y= False
 4- Bitwise operators #works on binary values or convert the exsisting value into binary first then perform operations( "&" and in bitwise,'|' or in bitwise,'>>','<<','~X')
  In Python, the expression x >> 2 represents a bitwise right shift operation.
  Explanation:
  The >> operator shifts the bits of x to the right by 2 positions.
This is equivalent to dividing x by 2^2 (i.e., 4) and taking the floor value.
For positive numbers, this effectively performs integer division by 4.
For negative numbers, the behavior depends on the system but typically preserves the sign (arithmetic shift).
Example:
python
Copy
Edit
x = 8  # Binary: 1000
print(x >> 2)  # 8 / 4 = 2  -> Binary: 10

x = -8  # Binary: -1000 (two's complement representation)
print(x >> 2)  # -8 // 4 = -2  -> Binary: -10
Summary:
x >> n shifts the bits of x to the right by n positions, effectively performing integer division by 2^n.
In Python, x << 2 represents a bitwise left shift operation.

Explanation:
The << operator shifts the bits of x to the left by 2 positions.
This is equivalent to multiplying x by 2^2 (i.e., 4).
Left shifting effectively increases the value by powers of two.
Example:
python
Copy
Edit
x = 3  # Binary: 11
print(x << 2)  # 3 * 4 = 12  -> Binary: 1100

x = 5  # Binary: 101
print(x << 2)  # 5 * 4 = 20  -> Binary: 10100
Summary:
x << n shifts the bits of x to the left by n positions, effectively multiplying x by 2^n.
 5- Assignment operators (=)
 6- Identity operators('is','is not')
  * even if both are looking same it does not means that they have the same memory allocation in python for example:
 a=2, b=2 then print(a is b) output will be true/
 but, a=[1,2,3] , b= [1,2,3] : print(a is b) output: false 
 7- Membership operators('in', 'not in') check if value present or not
 example : a = "Delhi"
 print("D" in a) ouptput: true.
 
 
